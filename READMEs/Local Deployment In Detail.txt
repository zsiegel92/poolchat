Make a new project in a new directory!

**Start a new project, create conda environment, :

mkdir poolchat
cd poolchat
git clone https://github.com/zsiegel92/poolchat.git
git init
#virutalenv --python=python3.6 env
conda env create

** cd out and in to autoenv **
pip install -r requirements.txt


** This will create a Heroku app called “poolchatWT” with a remote called “pro” and a conda package buildpack:

heroku create poolchatWT
heroku config:add BUILDPACK_URL=https://github.com/kennethreitz/conda-buildpack.git
git remote -v

** copy remote url in case different from how it’s written below **


** FOR HEROKU REPO **
git remote add pro https://git.heroku.com/poolchatWT.git
git remote rm heroku
git add *
git commit -m “new repo”
git push pro master

** FOR GITHUB REPO: set up github integration and automatic deploy in dashboard. **
git remote add hub <github URL>
git remote rm heroku
git add -A
git commit -m “new repo”
git push hub master

**Set environment variable to point to config variables in config.py (note this variable is stored in .env for local assignment)

heroku config:set APP_SETTINGS=config.ProductionConfig --remote pro

** Download Postgres for Mac. Make sure it is running! **

**Show databases, and connect to database to check it out - this code creates a database called “poolchat”, which the .env file in this repo is already configured for:

psql
#\l
# create database poolchat
# \q

Edit .env file with “poolchat” as the extension of the DATABASE_URL variable, cd out and in to autoenv and apply this command.

** Delete migrations folder in src. Run the following commands to initialize, migrate, and upgrade databses: **

cd poolchat/src
python manage.py db init
python manage.py db migrate
python manage.py db upgrade

** make sure your database and tables are present in Postgres **

psql
# \l
# \c *dbname*
# \dt
# \d *table name*
# \q

** Add Postgres to Heroku **

heroku config --app poolchatWT
heroku addons:create heroku-postgresql:hobby-dev --app poolchatWT
heroku config --app poolchatWT

git add -A
git commit -m "all migrations in place"
git push pro master


** Migrate database upgrade on Heroku. Note that this uses the migrations files created upon local migration (above). To migrate during development, migrate locally (as above), then re-upgrade (as below) on Heroku: **

heroku run python src/manage.py db upgrade --directory 'src/migrations' --app poolchatWT


** Install Redis Server on your computer! **

**Install the Heroku Redis plugin for your app:

heroku addons:create redistogo:nano --app poolchatWT
heroku config --app poolchatWT | grep REDISTOGO_URL


**Create a Facebook app for a page! Let’s call this one the “Local” app. Turn on messenger functionality, and webhooks. Generate a page access_token on your app’s page. I’ll call this “local_access_token”.
**Create ANOTHER Facebook app (can be your first app’s ‘testing’ app) for a DIFFERENT page! Let’s call this the “Remote” app. Get the OTHER access token, which I’ll call “remote_access_token”.

** Open the file “.env” in this project. Copy the “local_access_token” from your first FB page into “MESSENGER_PLATFORM_ACCESS_TOKEN”. You can’t miss it!
** Open the file “src/config.py”. Copy and past the “remote_access_token” into the corresponding variable in the ProductionConfig class. You can’t miss that either!

** You have now copied/pasted the LOCAL access token into one place, and the REMOTE access token into another place **

**Finally, update Heroku’s envi

**To run the App via Python using Flask manager’s server:

** In separate shells, do the following four things (and leave them open and running) **

ngrok http 5000
redis-server
cd poolchat/src
python worker.py
python manage.py runserver

** Go to your “Local” app on the FB Developers portal. Open the “webhooks” page, click on the “page” subscriptions, type in “[ngrok url]/webhooks” for the calback URL, and paste the “local_access_token”.
**Do the same thing for the “Remote” app, but for the URL input “https://poolchatWT.herokuapp.com”, and enter the “remote_access_token”.

**For both apps, go to the “Messenger” pane of the developer portal for that app, and make sure the app is subscribed to (and ONLY to) “Selected events: messages, messaging_postbacks”. Also, ensure that the app is “Subscribed” to the corresponding page for the access token you used.

** Message your pages! :) **




** Subscription trouble?: for some odd reason, sometimes my app stops responding to webhooks, like maybe after I move everything to a new directory and refactor all the code…Anyway, sometimes the fix is to open the “Postman” app and send a “POST” to the following URL (replacing “your_access_token” to one of your access tokens).

“https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=your_access_token”

** This can be achieved in the shell using (again, replace “your_access_token” with your access token):

“curl -X POST \
  'https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=your_access_token’ \”

**MAINTENANCE:**
**Whenever we update the database models in models.py:**

python manage.py db migrate
python manage.py db upgrade
heroku run python src/manage.py db upgrade --directory 'src/migrations' --app poolchatWT

**MAINTENANCE: Sometimes have to delete and re-initialize database migrations**
python manage.py db init

**MAINTENANCE: Had to delete ENTIRE psql database to proceed. No idea why. Deleted template databases (first had to alter to edit-able), then discovered I had to re-create them to re-create my database. No idea if this is what gave me eventual success. Probably not. Sometimes may have to delete alembic_version**
DROP TABLE alembic_version;
DROP DATABASE [IF EXISTS] poolchatWT;

